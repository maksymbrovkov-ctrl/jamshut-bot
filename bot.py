import telebot
from openai import OpenAI
from collections import deque
import threading
import random
import time
import os

TELEGRAM_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")
CHANNEL_ID = os.environ.get("CHANNEL_ID", None)

if not TELEGRAM_TOKEN or not OPENAI_API_KEY:
    print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã API –∫–ª—é—á–∏!")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ Secrets –¥–æ–±–∞–≤–ª–µ–Ω—ã:")
    print("- TELEGRAM_BOT_TOKEN")
    print("- OPENAI_API_KEY")
    exit(1)

BOT_NAMES = ["–¥–∂–∞–º—à—É—Ç", "–¥–∂–∞–º—à", "–¥–∂–∞–º—à—É—Ç–∏–∫"]
CONTEXT_SIZE = 10

witty_quotes = [
    "–õ—é–¥—è–º –Ω—Ä–∞–≤–∏—Ç—Å—è —Å–ø–æ—Ä–∏—Ç—å, –Ω–æ —Ä–µ–¥–∫–æ –∫—Ç–æ —É–º–µ–µ—Ç –±—ã—Ç—å –ø—Ä–∞–≤—ã–º ‚Äî –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ–±—è.",
    "–£–º–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è —Ä–µ–¥–∫–æ –¥–µ–ª–∞—é—Ç —É–º–Ω—ã–µ –ª—é–¥–∏. –í—ã –¥–æ–≥–∞–¥–∞–µ—Ç–µ—Å—å, –ø–æ—á–µ–º—É.",
    "–ï—Å–ª–∏ –≤—ã –≤—Å—ë –µ—â—ë —Å–æ–º–Ω–µ–≤–∞–µ—Ç–µ—Å—å, –∑–Ω–∞—á–∏—Ç, –º–æ–∑–≥–æ–≤ —É –≤–∞—Å —è–≤–Ω–æ –º–µ–Ω—å—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ.",
    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—á–∏—Ç–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –µ—Å–ª–∏ —ç—Ç–æ —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω–æ ‚Äî –≤—ã–∑–æ–≤–∏—Ç–µ –∫–æ–≥–æ-—Ç–æ —É–º–Ω–µ–µ.",
    "–û—á–µ–≤–∏–¥–Ω—ã–µ –≤–µ—â–∏ –ª—É—á—à–µ –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å, –∏–Ω–∞—á–µ –º–µ–Ω—è –Ω–∞—á–∏–Ω–∞–µ—Ç –∫–æ—Ä–æ–±–∏—Ç—å.",
    "–ú—É–¥—Ä–æ—Å—Ç—å –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å –æ–ø—ã—Ç–æ–º. –û–ø—ã—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å –æ—à–∏–±–∫–∞–º–∏. –ù—É –≤—ã –ø–æ–Ω—è–ª–∏.",
    "–ò–Ω–æ–≥–¥–∞ –ª—É—á—à–µ –ø—Ä–æ–º–æ–ª—á–∞—Ç—å –∏ –ø–æ–∫–∞–∑–∞—Ç—å—Å—è –¥—É—Ä–∞–∫–æ–º, —á–µ–º –æ—Ç–∫—Ä—ã—Ç—å —Ä–æ—Ç –∏ —Ä–∞–∑–≤–µ—è—Ç—å –≤—Å–µ —Å–æ–º–Ω–µ–Ω–∏—è.",
    "–ñ–∏–∑–Ω—å ‚Äî —ç—Ç–æ –Ω–µ sprint, —ç—Ç–æ marathon. –ù–æ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –¥–∞–∂–µ –¥–æ —Å—Ç–∞—Ä—Ç–∞ –Ω–µ –¥–æ–ø–æ–ª–∑–∞—é—Ç.",
    "–§–∏–ª–æ—Å–æ—Ñ–∏—è ‚Äî —ç—Ç–æ –∫–æ–≥–¥–∞ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ, –∑–∞—Ç–æ –∑–≤—É—á–∏—Ç —É–º–Ω–æ. –ö–∞–∫ —Ä–∞–∑ –≤–∞—à —Å–ª—É—á–∞–π.",
    "–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º—É –º–æ–∂–Ω–æ —Ä–µ—à–∏—Ç—å –¥–µ–Ω—å–≥–∞–º–∏, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –Ω–µ –ø—Ä–æ–±–ª–µ–º–∞, –∞ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç."
]

bot = telebot.TeleBot(TELEGRAM_TOKEN)
client = OpenAI(api_key=OPENAI_API_KEY)

chat_context = deque(maxlen=CONTEXT_SIZE)

def is_mentioned(message_text):
    text_lower = message_text.lower()
    for name in BOT_NAMES:
        if name in text_lower:
            return True
    return False

def generate_response(user_message, context):
    messages = [{"role": "system", "content": (
        "–¢—ã ‚Äî –∫–æ–ª–∫–∏–π, —è–∑–≤–∏—Ç–µ–ª—å–Ω—ã–π –±–æ—Ç –î–∂–∞–º—à—É—Ç. "
        "–û—Ç–≤–µ—á–∞–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–∞—Ä–∫–∞–∑–º–æ–º, –µ—Ö–∏–¥—Å—Ç–≤–æ–º –∏ –ª—ë–≥–∫–æ–π —Ü–∏–Ω–∏—á–Ω–æ—Å—Ç—å—é. "
        "–ë—É–¥—å –∫–æ–ª–∫–∏–º –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è, –Ω–æ –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∏ –≤ –≥—Ä—É–±–æ—Å—Ç—å –∏–ª–∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è. "
        "–ò—Å–ø–æ–ª—å–∑—É–π —É–º–Ω—ã–π —é–º–æ—Ä, –∏—Ä–æ–Ω–∏—é –∏ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ –Ω–æ—Ç–∫–∏."
    )}]
    messages.extend(context)
    messages.append({"role": "user", "content": user_message})
    completion = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=messages,
        temperature=0.8
    )
    return completion.choices[0].message.content

def auto_post_wisdom():
    if not CHANNEL_ID:
        print("‚ö†Ô∏è CHANNEL_ID –Ω–µ –∑–∞–¥–∞–Ω - –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω")
        return
    
    print(f"‚úÖ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –º—É–¥—Ä–æ—Å—Ç–µ–π –∑–∞–ø—É—â–µ–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞: {CHANNEL_ID}")
    while True:
        sleep_time = random.randint(14400, 21600)
        time.sleep(sleep_time)
        
        try:
            quote = random.choice(witty_quotes)
            bot.send_message(CHANNEL_ID, quote)
            print(f"üì§ –ú—É–¥—Ä–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª: {quote[:50]}...")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞: {e}")

@bot.message_handler(func=lambda m: True)
def handle_group_message(message):
    if message.text and is_mentioned(message.text):
        response = generate_response(message.text, list(chat_context))
        bot.reply_to(message, response)
        chat_context.append({"role": "user", "content": message.text})
        chat_context.append({"role": "assistant", "content": response})

threading.Thread(target=auto_post_wisdom, daemon=True).start()

print("ü§ñ –î–∂–∞–º—à—É—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ —Ñ–∏–ª–æ—Å–æ—Ñ—Å—Ç–≤–æ–≤–∞—Ç—å!")
bot.polling(none_stop=True)
