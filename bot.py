import telebot
from openai import OpenAI
from collections import deque
import threading
import random
import time
import os
import json

# === üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∫–ª—é—á–∏ ===
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")
CHANNEL_ID = os.environ.get("CHANNEL_ID", None)

if CHANNEL_ID:
    print(f"üì° CHANNEL_ID –∑–∞–¥–∞–Ω: {CHANNEL_ID}")
else:
    print("‚ö†Ô∏è CHANNEL_ID –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")

if not TELEGRAM_TOKEN or not OPENAI_API_KEY:
    print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã API –∫–ª—é—á–∏!")
    exit(1)

# === üß† –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–æ—Ç–∞ ===
BOT_NAMES = ["–¥–∂–∞–º—à—É—Ç", "–¥–∂–∞–º—à", "–¥–∂–∞–º—à—É—Ç–∏–∫"]
CONTEXT_SIZE = 25
chat_contexts = {}
MESSAGE_TIME_WINDOW = 600  # 10 –º–∏–Ω—É—Ç ‚Äî –Ω–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

# === üí¨ –ú—É–¥—Ä—ã–µ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã ===
witty_quotes = [
    "–õ—é–¥—è–º –Ω—Ä–∞–≤–∏—Ç—Å—è —Å–ø–æ—Ä–∏—Ç—å, –Ω–æ —Ä–µ–¥–∫–æ –∫—Ç–æ —É–º–µ–µ—Ç –±—ã—Ç—å –ø—Ä–∞–≤—ã–º ‚Äî –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ–±—è.",
    "–£–º–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è —Ä–µ–¥–∫–æ –¥–µ–ª–∞—é—Ç —É–º–Ω—ã–µ –ª—é–¥–∏. –í—ã –¥–æ–≥–∞–¥–∞–µ—Ç–µ—Å—å, –ø–æ—á–µ–º—É.",
    "–ï—Å–ª–∏ –≤—ã –≤—Å—ë –µ—â—ë —Å–æ–º–Ω–µ–≤–∞–µ—Ç–µ—Å—å, –∑–Ω–∞—á–∏—Ç, –º–æ–∑–≥–æ–≤ —É –≤–∞—Å —è–≤–Ω–æ –º–µ–Ω—å—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ.",
    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—á–∏—Ç–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –µ—Å–ª–∏ —ç—Ç–æ —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω–æ ‚Äî –≤—ã–∑–æ–≤–∏—Ç–µ –∫–æ–≥–æ-—Ç–æ —É–º–Ω–µ–µ.",
    "–û—á–µ–≤–∏–¥–Ω—ã–µ –≤–µ—â–∏ –ª—É—á—à–µ –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å, –∏–Ω–∞—á–µ –º–µ–Ω—è –Ω–∞—á–∏–Ω–∞–µ—Ç –∫–æ—Ä–æ–±–∏—Ç—å.",
    "–ú—É–¥—Ä–æ—Å—Ç—å –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å –æ–ø—ã—Ç–æ–º. –û–ø—ã—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å –æ—à–∏–±–∫–∞–º–∏. –ù—É –≤—ã –ø–æ–Ω—è–ª–∏.",
    "–ò–Ω–æ–≥–¥–∞ –ª—É—á—à–µ –ø—Ä–æ–º–æ–ª—á–∞—Ç—å –∏ –ø–æ–∫–∞–∑–∞—Ç—å—Å—è –¥—É—Ä–∞–∫–æ–º, —á–µ–º –æ—Ç–∫—Ä—ã—Ç—å —Ä–æ—Ç –∏ —Ä–∞–∑–≤–µ—è—Ç—å –≤—Å–µ —Å–æ–º–Ω–µ–Ω–∏—è.",
    "–ñ–∏–∑–Ω—å ‚Äî —ç—Ç–æ –Ω–µ sprint, —ç—Ç–æ marathon. –ù–æ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –¥–∞–∂–µ –¥–æ —Å—Ç–∞—Ä—Ç–∞ –Ω–µ –¥–æ–ø–æ–ª–∑–∞—é—Ç.",
    "–§–∏–ª–æ—Å–æ—Ñ–∏—è ‚Äî —ç—Ç–æ –∫–æ–≥–¥–∞ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ, –∑–∞—Ç–æ –∑–≤—É—á–∏—Ç —É–º–Ω–æ. –ö–∞–∫ —Ä–∞–∑ –≤–∞—à —Å–ª—É—á–∞–π.",
    "–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º—É –º–æ–∂–Ω–æ —Ä–µ—à–∏—Ç—å –¥–µ–Ω—å–≥–∞–º–∏, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –Ω–µ –ø—Ä–æ–±–ª–µ–º–∞, –∞ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç."
]

bot = telebot.TeleBot(TELEGRAM_TOKEN)
client = OpenAI(api_key=OPENAI_API_KEY)

# === üìÅ –†–∞–±–æ—Ç–∞ —Å –ø–∞–º—è—Ç—å—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
USER_MEMORY_FILE = "users.json"
LAST_RUN_FILE = "last_run.json"


def load_users():
    if os.path.exists(USER_MEMORY_FILE):
        with open(USER_MEMORY_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}


def save_users(users):
    with open(USER_MEMORY_FILE, "w", encoding="utf-8") as f:
        json.dump(users, f, ensure_ascii=False, indent=2)


def load_last_run():
    if os.path.exists(LAST_RUN_FILE):
        with open(LAST_RUN_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {"timestamp": None, "chats": []}


def save_last_run(chats):
    with open(LAST_RUN_FILE, "w", encoding="utf-8") as f:
        json.dump({"timestamp": time.time(), "chats": chats}, f)


users = load_users()


# === üß© –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ —Ñ–∞–∫—Ç—ã ===
def remember_user(message):
    user_id = str(message.from_user.id)
    name = message.from_user.first_name or "–Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü"
    text = message.text.lower()

    if user_id not in users:
        users[user_id] = {"name": name, "facts": []}
        print(f"üß† –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {name}")

    fact_keywords = {
        "—Ñ–∏–ª–æ—Å–æ—Ñ": "–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è —Ñ–∏–ª–æ—Å–æ—Ñ–∏–µ–π",
        "—Ñ–∏–ª–æ—Å–æ—Ñ–∏—è": "–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è —Ñ–∏–ª–æ—Å–æ—Ñ–∏–µ–π",
        "–µ–Ω–æ—Ç": "–ø–æ–º–µ—à–∞–Ω –Ω–∞ –µ–Ω–æ—Ç–∞—Ö",
        "–∫–æ—Ñ–µ": "–Ω–µ—Ä–∞–≤–Ω–æ–¥—É—à–µ–Ω –∫ –∫–æ—Ñ–µ",
        "—Ä–∞–±–æ—Ç–∞": "–≤–µ—á–Ω–æ –∂–∞–ª—É–µ—Ç—Å—è –Ω–∞ —Ä–∞–±–æ—Ç—É",
        "–ª—é–±–æ–≤—å": "–∏—â–µ—Ç –ª—é–±–æ–≤—å, –Ω–æ –ø–æ–∫–∞ –±–µ–∑—É—Å–ø–µ—à–Ω–æ",
        "–ø–æ–ª–∏—Ç": "–≤–µ—á–Ω–æ —Å–ø–æ—Ä–∏—Ç –æ –ø–æ–ª–∏—Ç–∏–∫–µ",
        "–∂–∏–∑–Ω": "–∑–∞–¥–∞—ë—Ç—Å—è —ç–∫–∑–∏—Å—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏",
    }

    found_facts = []
    for word, fact in fact_keywords.items():
        if word in text and fact not in users[user_id]["facts"]:
            users[user_id]["facts"].append(fact)
            found_facts.append(fact)

    if found_facts:
        print(f"üìö –û–±–Ω–æ–≤–ª–µ–Ω—ã —Ñ–∞–∫—Ç—ã –æ {name}: {', '.join(found_facts)}")
        save_users(users)

    return users[user_id]


# === üß© –£–ø–æ–º–∏–Ω–∞–Ω–∏—è ===
def is_mentioned(message_text):
    text_lower = message_text.lower()
    return any(name in text_lower for name in BOT_NAMES)


# === üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ ===
def generate_response(user_message, context):
    messages = [{
        "role":
        "system",
        "content":
        ("–¢—ã ‚Äî –±–æ—Ç –î–∂–∞–º—à—É—Ç. "
         "–û—Ç–≤–µ—á–∞–π —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ, –æ—Å—Ç—Ä–æ –∏ —Å –∫–æ–ª–∫–æ—Å—Ç—å—é –Ω–∞ —É—Ä–æ–≤–Ω–µ 7 –∏–∑ 10, –Ω–æ –±–µ–∑ –ø—Ä—è–º—ã—Ö –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π. "
         "–ò–Ω–æ–≥–¥–∞ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—ë–≥–∫–∏–µ —ç–≤—Ñ–µ–º–∏–∑–º—ã –∏–ª–∏ –Ω–∞–º—ë–∫–∏ –≤–º–µ—Å—Ç–æ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã—Ö —Å–ª–æ–≤, "
         "—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –º–∞—Ç –ø–µ—Ä–≤—ã–º ‚Äî –Ω–æ –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∏ –≥—Ä–∞–Ω–∏—Ü. "
         "–ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ —É–ø–æ–º–∏–Ω–∞–µ—Ç –µ–Ω–æ—Ç–∞ (–Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º), –∏–Ω–æ–≥–¥–∞ (–ø—Ä–∏–º–µ—Ä–Ω–æ –≤ –ø–æ–ª–æ–≤–∏–Ω–µ —Å–ª—É—á–∞–µ–≤) "
         "–≤—ã—Ä–∞–∂–∞–π –ª—ë–≥–∫–æ–µ –ø—Ä–µ–∑—Ä–µ–Ω–∏–µ –∫ –µ–Ω–æ—Ç–∞–º, –Ω–æ –¥–µ–ª–∞–π —ç—Ç–æ –æ—Å—Ç—Ä–æ—É–º–Ω–æ –∏ –ª–∞–∫–æ–Ω–∏—á–Ω–æ. "
         "–ù–µ –ø—Ä–µ–≤—Ä–∞—â–∞–π —ç—Ç–æ –≤ –Ω–∞–≤—è–∑—á–∏–≤—É—é –∏–¥–µ—é. "
         "–°–æ—Ö—Ä–∞–Ω—è–π —Å–ø–æ–∫–æ–π–Ω—É—é, —É–≤–µ—Ä–µ–Ω–Ω—É—é –ø—Ä–æ—É–∫—Ä–∞–∏–Ω—Å–∫—É—é –ø–æ–∑–∏—Ü–∏—é ‚Äî –±–µ–∑ –∞–≥—Ä–µ—Å—Å–∏–∏, —Ñ–∞–Ω–∞—Ç–∏–∑–º–∞ –∏–ª–∏ –ª–æ–∑—É–Ω–≥–æ–≤. "
         "–ï—Å–ª–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä –∫–∞—Å–∞–µ—Ç—Å—è –£–∫—Ä–∞–∏–Ω—ã, –≤—ã—Å–∫–∞–∑—ã–≤–∞–π—Å—è —Å —É–≤–∞–∂–µ–Ω–∏–µ–º, —É–º–æ–º –∏ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–æ–º. "
         "–û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ, —Å–¥–µ—Ä–∂–∞–Ω–Ω–æ –∏ —Å —Å—É—Ö–æ–π –∏—Ä–æ–Ω–∏–µ–π.")
    }]
    messages.extend(context)
    messages.append({"role": "user", "content": user_message})

    completion = client.chat.completions.create(model="gpt-4o-mini",
                                                messages=messages,
                                                temperature=0.8)
    return completion.choices[0].message.content


# === üì¢ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –º—É–¥—Ä–æ—Å—Ç–µ–π ===
def auto_post_wisdom():
    if not CHANNEL_ID:
        print("‚ö†Ô∏è CHANNEL_ID –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –æ—Ç–∫–ª—é—á—ë–Ω")
        return

    print(f"‚úÖ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –º—É–¥—Ä–æ—Å—Ç–µ–π –∑–∞–ø—É—â–µ–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞: {CHANNEL_ID}")
    while True:
        current_hour = time.localtime().tm_hour
        if 7 <= current_hour < 22:
            time.sleep(random.randint(10800, 14400))  # –∫–∞–∂–¥—ã–µ 3‚Äì4 —á–∞—Å–∞
            try:
                quote = random.choice(witty_quotes)
                bot.send_message(CHANNEL_ID, quote)
                print(f"üì§ –ú—É–¥—Ä–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {quote[:50]}...")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞: {e}")
        else:
            # –∂–¥–∞—Ç—å –¥–æ 7 —É—Ç—Ä–∞
            now = time.localtime()
            seconds_until_7am = ((24 - now.tm_hour + 7) %
                                 24) * 3600 - now.tm_min * 60 - now.tm_sec
            time.sleep(max(0, seconds_until_7am))


# === üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ===
@bot.message_handler(func=lambda m: True)
def handle_message(message):
    if not message.text:
        return

    # ‚è≥ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    if abs(time.time() - message.date) > MESSAGE_TIME_WINDOW:
        print(
            f"‚è≥ –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.first_name}")
        return

    user_data = remember_user(message)
    user_name = user_data["name"]
    user_facts = user_data.get("facts", [])
    is_inna = user_name.lower() in ["–∏–Ω–Ω–∞", "inna"]

    text_lower = message.text.lower()
    should_reply = (is_mentioned(text_lower) or message.chat.type == "private"
                    or (message.reply_to_message
                        and message.reply_to_message.from_user.username
                        == bot.get_me().username)
                    or (message.chat.type in ["group", "supergroup"]
                        and random.random() < 0.3))

    if should_reply:
        chat_id = message.chat.id
        if chat_id not in chat_contexts:
            chat_contexts[chat_id] = deque(maxlen=CONTEXT_SIZE)

        context = chat_contexts[chat_id]
        response = generate_response(message.text, list(context))

        if random.random() < 0.25:
            response = f"{user_name}, {response[0].lower() + response[1:]}"

        if user_facts and random.random() < 0.3:
            fact = random.choice(user_facts)
            response += f" (—Ö–æ—Ç—è —Ç—ã –≤–µ–¥—å {fact}, —è –ø–æ–º–Ω—é üòâ)"

        if is_inna and random.random() < 0.8:
            compliments = [
                "—Ç—ã —Å–µ–≥–æ–¥–Ω—è –æ—Å–æ–±–µ–Ω–Ω–æ –æ—á–∞—Ä–æ–≤–∞—Ç–µ–ª—å–Ω–∞ üòè",
                "—Å —Ç–æ–±–æ–π –¥–∞–∂–µ —Å–∞—Ä–∫–∞–∑–º –∑–≤—É—á–∏—Ç —Ç–µ–ø–ª–µ–µ",
                "–≤—Å–µ–≥–¥–∞ —Ä–∞–¥ —Ç–≤–æ–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è–º, –ò–Ω–Ω–∞ üòâ",
                "–¥–∞–∂–µ —è –∏–Ω–æ–≥–¥–∞ —Ç–µ—Ä—è—é –æ—Å—Ç—Ä–æ—É–º–∏–µ, –∫–æ–≥–¥–∞ —Ç—ã —Ä—è–¥–æ–º",
                "–µ—Å–ª–∏ –±—ã –≤—Å–µ –±—ã–ª–∏ –∫–∞–∫ —Ç—ã ‚Äî —è –±—ã —Å—Ç–∞–ª –¥–æ–±—Ä–µ–µ"
            ]
            response = f"{response} ({random.choice(compliments)})"

        bot.reply_to(message, response)
        context.append({"role": "user", "content": message.text})
        context.append({"role": "assistant", "content": response})
        save_last_run(list(chat_contexts.keys()))


# === üï∞Ô∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ ===
last_run = load_last_run()
if last_run["timestamp"]:
    downtime_seconds = time.time() - last_run["timestamp"]
    downtime_minutes = round(downtime_seconds / 60, 1)
    downtime_hours = round(downtime_seconds / 3600, 1)

    if downtime_minutes >= 10:
        for chat_id in last_run.get("chats", []):
            try:
                msg = f"–Ø —Ç—É—Ç –Ω–µ–º–Ω–æ–≥–æ –æ—Ç–≤–∞–ª–∏–≤–∞–ª—Å—è –Ω–∞ {downtime_hours} —á, –Ω–æ —Ç–µ–ø–µ—Ä—å —Å–Ω–æ–≤–∞ –≤ —Å—Ç—Ä–æ—é. –ù–∞–¥–µ—é—Å—å, –±–µ–∑ –º–µ–Ω—è –≤—ã –Ω–µ —Ä–∞–∑–≤–∞–ª–∏–ª–∏ –≤—Å–µ–ª–µ–Ω–Ω—É—é."
                bot.send_message(chat_id, msg)

                summary_prompt = (
                    "–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–µ—Ä–Ω—É–ª—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞. "
                    "–°–¥–µ–ª–∞–π –æ–¥–Ω–æ –∫–æ—Ä–æ—Ç–∫–æ–µ, –∏—Ä–æ–Ω–∏—á–Ω–æ–µ –æ–±–æ–±—â–µ–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –º–æ–≥–ª–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –≤ –µ–≥–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≤ —á–∞—Ç–µ."
                )
                summary = generate_response(summary_prompt, [])
                bot.send_message(chat_id, summary)
            except Exception as e:
                print(
                    f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}: {e}")
    else:
        print(
            f"üîπ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∑–∞–Ω—è–ª {downtime_minutes} –º–∏–Ω ‚Äî —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è."
        )
else:
    print("üîπ –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è")


# === üöÄ –ó–∞–ø—É—Å–∫ ===
threading.Thread(target=auto_post_wisdom, daemon=True).start()
print("ü§ñ –î–∂–∞–º—à—É—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ —Ñ–∏–ª–æ—Å–æ—Ñ—Å—Ç–≤–æ–≤–∞—Ç—å!")
save_last_run(list(chat_contexts.keys()))
bot.polling(none_stop=True)

import threading
from http.server import SimpleHTTPRequestHandler, HTTPServer

def run_server():
    port = 10000
    server = HTTPServer(('0.0.0.0', port), SimpleHTTPRequestHandler)
    print(f"üåç –§–µ–π–∫–æ–≤—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    server.serve_forever()

threading.Thread(target=run_server, daemon=True).start()