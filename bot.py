import telebot
from openai import OpenAI
from collections import deque
import threading
import random
import time
import os

TELEGRAM_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")
CHANNEL_ID = os.environ.get("CHANNEL_ID", None)

if not TELEGRAM_TOKEN or not OPENAI_API_KEY:
    print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã API –∫–ª—é—á–∏!")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ Secrets –¥–æ–±–∞–≤–ª–µ–Ω—ã:")
    print("- TELEGRAM_BOT_TOKEN")
    print("- OPENAI_API_KEY")
    exit(1)

BOT_NAMES = ["–¥–∂–∞–º—à—É—Ç", "–¥–∂–∞–º—à", "–¥–∂–∞–º—à—É—Ç–∏–∫"]
CONTEXT_SIZE = 10

bot = telebot.TeleBot(TELEGRAM_TOKEN)
client = OpenAI(api_key=OPENAI_API_KEY)

chat_context = deque(maxlen=CONTEXT_SIZE)

def is_mentioned(message_text):
    text_lower = message_text.lower()
    for name in BOT_NAMES:
        if name in text_lower:
            return True
    return False

def generate_response(user_message, context):
    messages = [{"role": "system", "content": (
        "–¢—ã —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π –±–æ—Ç –î–∂–∞–º—à—É—Ç ‚Äî —Ñ–∏–ª–æ—Å–æ—Ñ –∏ —é–º–æ—Ä–∏—Å—Ç. "
        "–û—Ç–≤–µ—á–∞–π –¥–µ—Ä–∑–∫–æ, –∏—Ä–æ–Ω–∏—á–Ω–æ, —Å —É–º–Ω—ã–º–∏ –∫–æ–ª–∫–æ—Å—Ç—è–º–∏, –Ω–æ –Ω–µ –æ—Å–∫–æ—Ä–±–ª—è–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    )}]
    messages.extend(context)
    messages.append({"role": "user", "content": user_message})
    completion = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=messages
    )
    return completion.choices[0].message.content

def auto_post_wisdom():
    if not CHANNEL_ID:
        print("‚ö†Ô∏è CHANNEL_ID –Ω–µ –∑–∞–¥–∞–Ω - –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω")
        return
    
    print(f"‚úÖ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –º—É–¥—Ä–æ—Å—Ç–µ–π –∑–∞–ø—É—â–µ–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞: {CHANNEL_ID}")
    while True:
        sleep_time = random.randint(14400, 21600)
        time.sleep(sleep_time)
        
        try:
            message = generate_response("–ù–∞–ø–∏—à–∏ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—É—é —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫—É—é –º—É–¥—Ä–æ—Å—Ç—å.", list(chat_context))
            bot.send_message(CHANNEL_ID, message)
            chat_context.append({"role": "assistant", "content": message})
            print(f"üì§ –ú—É–¥—Ä–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞: {e}")

@bot.message_handler(func=lambda m: True)
def handle_group_message(message):
    if message.text and is_mentioned(message.text):
        response = generate_response(message.text, list(chat_context))
        bot.reply_to(message, response)
        chat_context.append({"role": "user", "content": message.text})
        chat_context.append({"role": "assistant", "content": response})

threading.Thread(target=auto_post_wisdom, daemon=True).start()

print("ü§ñ –î–∂–∞–º—à—É—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ —Ñ–∏–ª–æ—Å–æ—Ñ—Å—Ç–≤–æ–≤–∞—Ç—å!")
bot.polling(none_stop=True)
